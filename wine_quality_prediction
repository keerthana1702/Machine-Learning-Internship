#Importing essential libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plot
%matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error


#Load dataset
df = pd.read_csv("C:/Users/keerthana s s/Machine_Learning_Internship/WineQT.csv")
df.shape


#Plot graph to find the outliars
plot.figure(figsize=(20,15))
for i,col in enumerate(df.iloc[:,0:6]):
    plot.subplot(3,3,i+1)
    sns.boxplot(data=df.iloc[:,0:6],x=col)
    plot.xlabel(col, fontsize=15)
    plot.xticks(fontsize=10)


#Caping the outliars
def cap_data(df):
    for col in df.columns:
        print("\n\n capping the \n",col)
        if (((df[col].dtype)=='float64') | ((df[col].dtype)=='int64')):
            
            q1=df[col].quantile(0.25)
            q3=df[col].quantile(0.75)
            iqr=q3-q1
            lower,upper=(q1-(iqr*1.5)),(q3+(iqr*1.5))    
            print("q1=",q1,"q3=",q3,"iqr=",iqr,"lower=",lower,"upper=",upper) 
            df[col][df[col] <= lower] = lower
            df[col][df[col] >= upper] = upper
            print("\n",df[col][df[col] <= lower] )
            print("\n",df[col][df[col] >= upper] )
            
        else:
            df[col]=df[col]
    return df
final_df=cap_data(df)


#Ploting each labels
df.hist()
plot.show()


#Data preparation
x=df.drop(['quality'], axis=1)
y=df['quality']


# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=42)


#Training model
model = LinearRegression()
model.fit(X_train, y_train)

#Predicting model
y_pred = model.predict(X_test)

#Model evaluation
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100
print("Root Mean Squared Error (RMSE):", rmse)
print("Mean Absolute Percentage Error (MAPE):", mape)




